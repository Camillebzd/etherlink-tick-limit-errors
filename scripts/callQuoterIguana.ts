import { ethers } from "hardhat";

async function sendTransaction() {
  // PancakeInterfaceMulticallV2 Etherlink testnet
  const contractAddress = "0xa318d3b9Af779Fae6429cA689bc2241d01F4C8D0";

  // Replace with the contract's ABI
  const contractABI = [
    {
      "inputs": [],
      "name": "gasLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaslimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct PancakeInterfaceMulticallV2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct PancakeInterfaceMulticallV2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct PancakeInterfaceMulticallV2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "gasBuffer",
          "type": "uint256"
        }
      ],
      "name": "multicallWithGasLimitation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct PancakeInterfaceMulticallV2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "lastSuccessIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ];

  // Get the signer (the account that will interact with the contract)
  const [signer] = await ethers.getSigners();

  // Create a contract instance
  const contract = new ethers.Contract(contractAddress, contractABI, signer);

  console.log("--- before call ---");

  // target contract address 0x6e8432F0Ed242fABfA481dd449407b0f724d8D03 (QuoterV2)
  // gas limit 1000000n
  // calldata: ...... (same everytime just for test)
  const param = [
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
    ["0x6e8432F0Ed242fABfA481dd449407b0f724d8D03", 1000000n, "0xcdca175300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000a18f07d736b90be550000000000000000000000000000000000000000000000000000000000000000000002bb1ea698633d57705e93b0e40c1077d46cd6a51d80009c4a7c9092a5d2c3663b7c5f714dba806d02d62b58a000000000000000000000000000000000000000000"],
  ]
  console.log("Number of iteration:", param.length);
  // real transaction (not a gas estimation or simulation call)
  const tx = await contract.multicallWithGasLimitation.staticCall(param, 12000000n);
  console.log("Transaction:\n", tx);
  console.log("--- call done ---");
}

sendTransaction().catch((error) => {
  console.error(error);
  process.exit(1);
});